type: edu
custom_name: stage8
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = 32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = 2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c  ").trim();
                        if (!output.equals("2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 13 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test case with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // test suit for the 8th stage with very large numbers
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 32000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute(
                            "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - n - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong(
                                "The program cannot process addition " +
                                    "and subtraction operations correctly.");
                        }

                        // testing reassignment with big values
                        output = main.execute("c = n \nc = 2000000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("2000000000000000000000")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11000000000000000000 - 9000000000000000000 - " +
                                "c + 1998000000000000000000").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5000000000000000000 --- 2000000000000000000 " +
                                "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                        if (!output.equals("10000000000000000000")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // testing all operators, with variables
                        main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                        output = main.execute("a * 4000000000000000000 / " +
                                "b - (3000000000000000000 - 1000000000000000000)").trim();
                        if (!output.equals("12000000000000000000")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })

            );
        }
    }
  learner_created: false
- name: src/calculator/RPN.java
  visible: true
  text: |
    package calculator;

    import java.util.EmptyStackException;
    import java.util.Stack;

    public class RPN {
        private Stack<String> stack;
        private StringBuilder output;
        private Variables variables;

        public RPN() {
            stack = new Stack<>();
            output = new StringBuilder();
            variables = Variables.getInstance();
        }

        private int priorityOperator(String operator) {
            if (operator.equals("+") || operator.equals("-")) {
                return 1;
            } else if (operator.equals("*") || operator.equals("/")){
                return 2;
            } else {
                return -1;
            }
        }

        public StringBuilder convert(String input) {
            output.setLength(0);
            stack.clear();
            String[] split = input.split("[ ]+");
                    for (int i = 0; i < split.length; i++) {
                if (split[i].matches("[0-9]+")) {
                    output.append(split[i] + " ");
                } else if (split[i].matches("[A-Za-z]+")) {
                    output.append(variables.getValue(split[i])+ " ");
                } else if (split[i].equals("(")) {
                    stack.push(split[i]);
                } else if (split[i].equals(")")) {
                    String temp = stack.pop();
                    while(!temp.equals("(")){
                        output.append(temp + " ");
                        try {
                            temp = stack.pop();
                        } catch (EmptyStackException e) {
                            output = new StringBuilder("Invalid expression");
                            break;
                        }
                    }
                } else {
                    if (stack.isEmpty()) {
                        stack.push(split[i]);
                    } else {
                        while(!stack.isEmpty() && priorityOperator(stack.peek()) >= priorityOperator(split[i])){
                            output.append(stack.pop() + " ");
                        }
                        stack.push(split[i]);
                    }
                }
            }

            while(!stack.isEmpty()) {
                if (stack.peek().equals(")") || stack.peek().equals("(")) {
                    output = new StringBuilder("Invalid expression");
                    break;
                } else {
                output.append(stack.pop() + " ");
                }
            }
            return output;
        }
    }
  learner_created: true
- name: src/calculator/Application.java
  visible: true
  text: |
    package calculator;

    import java.util.Optional;
    import java.util.Scanner;

    public class Application {
        private Validate validate;
        private RPN rpn;
        private ResultCalculate resultCalculate;
        private Scanner scanner;
        private String output;
        private Variables variables;

        public Application() {
            validate = new Validate();
            resultCalculate = new ResultCalculate();
            rpn = new RPN();
            scanner = new Scanner(System.in);
            variables = Variables.getInstance();
        }

        public void run() {
            do {
                output = scanner.nextLine();
                if (output.startsWith("/")) {
                    if (output.equals("/exit")) {
                        break;
                    } else if (output.equals("/help")) {
                        System.out.println("The program calculates the sum of numbers");
                    } else {
                        System.out.println("Unknown command");
                    }
                } else if (output.contains("=")) {
                    variables.addVariable(output);
                } else if (!output.isEmpty()) {
                    if (output.matches("^-?[0-9]+$")) {
                        System.out.println(output);
                    } else if (output.matches("^[A-Za-z]+$")) {
                        Optional <String> value = Optional.ofNullable(variables.getValue(output.trim()));
                        value.ifPresentOrElse(System.out::println,
                                () -> System.out.println("Unknown variable"));
                    } else {
                    String validatedOutput = validate.start(output);
                        if (validatedOutput.contains("Invalid expression")) {
                            System.out.println("Invalid expression");
                        } else {
                            StringBuilder rpnOutput = rpn.convert(validatedOutput);
                            if (String.valueOf(rpnOutput).equals("Invalid expression")) {
                                System.out.println(rpnOutput);
                            } else {
                                resultCalculate.run(String.valueOf(rpnOutput));
                            }
                        }
                    }
                }
            }while (true);
            System.out.println("Bye!");
        }
    }
  learner_created: true
- name: src/calculator/Variables.java
  visible: true
  text: |
    package calculator;

    import java.util.HashMap;
    import java.util.Map;

    public class Variables {

        private Map<String, String> variables;
        private static Variables instance;

        private Variables() {
            variables = new HashMap<>();
        }

        public static Variables getInstance() {
            if (instance == null) {
                instance = new Variables();
            }
            return instance;
        }

        public void addVariable(String output) {
            if (output.split("=").length == 2) {
                String key = output.split("=")[0].trim();
                String value = output.split("=")[1].trim();
                    if (key.matches("(?=.*?[^A-Za-z]).{1,}")) {
                        System.out.println("Invalid identifier");
                    } else if (value.matches("^(?=.*?[a-zA-Z])(?=.*?[0-9]).{2,}$")) {
                        System.out.println("Invalid assignment");
                    } else {
                        //if (value.matches("\\d+")) {
                        if (value.matches("-?\\d+")) {
                            variables.remove(key);
                            variables.put(key, value);
                        } else {
                            if (variables.containsKey(value)) {
                                variables.remove(key);
                                variables.put(key, variables.get(value));
                            } else {
                                System.out.println("Unknown variable");
                            }
                        }
                    }
            } else {
                System.out.println("Invalid assignment");
            }
           // variables.forEach((s, s2) -> System.out.println(s + " --- " + s2));
        }

        public String getValue(String variable) {
            return variables.get(variable);
        }

    }
  learner_created: true
- name: src/calculator/Validate.java
  visible: true
  text: |-
    package calculator;

    public class Validate {
        private StringBuilder validatedOutput;
        private StringBuilder operator;
        private Variables variables;

        public Validate() {
            validatedOutput = new StringBuilder();
            operator = new StringBuilder();
            variables = Variables.getInstance();
        }

        public String start(String input) {
            validatedOutput.setLength(0);
            operator.setLength(0);
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == '+' || input.charAt(i) == '-' || input.charAt(i) == '*' || input.charAt(i) == '/') {
                    if (operator.length() == 0) {
                        operator.append(input.charAt(i));
                    } else {
                        if (input.charAt(i) == operator.charAt(operator.length() - 1)) {
                            operator.append(input.charAt(i));
                        }
                    }
                } else if (input.charAt(i) != ' ') {
                    if (operator.length() == 1) {
                        validatedOutput.append(" " + operator.charAt(0) + " ");
                    } else if (operator.length() > 1) {
                        if (operator.charAt(0) == '/' || operator.charAt(0) == '*') {
                            validatedOutput.append("Invalid expression");
                            break;
                        } else if (operator.charAt(0) == '+') {
                            validatedOutput.append(" + ");
                        } else {
                            if (operator.length() % 2 == 0) {
                                validatedOutput.append(" + ");
                            } else {
                                validatedOutput.append(" - ");
                            }
                        }
                    }
                    operator.setLength(0);
                    if (input.charAt(i) == '(' || input.charAt(i) == ')') {
                        validatedOutput.append(" " + input.charAt(i) + " ");
                    } else {
                        validatedOutput.append(input.charAt(i));
                    }
                }
            }
                //validatedOutput.

                return String.valueOf(validatedOutput);
            }
        }





    //if (input.charAt(i) == '+' || input.charAt(i) == '-' || input.charAt(i) == '*' || input.charAt(i) == '/') {
    //                if (operator.length() == 0) {
    //                    operator.append(input.charAt(i));
    //                } else {
    //                    if (input.charAt(i) == operator.charAt(operator.length() - 1)) {
    //                        operator.append(input.charAt(i));
    //                    }
    //                }
    //            } else if (input.charAt(i) != ' ') {
    //                if (operator.length() == 1) {
    //                    validated.append(" " + operator.charAt(0) + " ");
    //                } else if (operator.length() > 1) {
    //                    if (operator.charAt(0) == '/' || operator.charAt(0) == '*') {
    //                        //validated.setLength(0);
    //                        validated.append("Invalid expression");
    //                        break;
    //                    } else if (operator.charAt(0) == '+') {
    //                        validated.append(" + ");
    //                    } else {
    //                        if (operator.length() %2 == 0) {
    //                            validated.append(" + ");
    //                        } else {
    //                            validated.append(" - ");
    //                        }
    //                    }
    //                }
    //                operator.setLength(0);
    //                if (input.charAt(i) == '(' || input.charAt(i) == ')' ) {
    //                    validated.append(" " + input.charAt(i) + " ");
    //                } else {
    //                    validated.append(input.charAt(i));
    //                }
    //            }
  learner_created: true
- name: src/calculator/ResultCalculate.java
  visible: true
  text: |
    package calculator;

    import java.util.Stack;

    public class ResultCalculate {

    //    public ResultCalculate() {
    //    }

        private int calculate (int number1, int number2, String operator) {
            if (operator.contains("+")) {
                return number2 + number1;
            } else if (operator.contains("-")) {
                return number2 - number1;
            } else if (operator.contains("*")) {
                return number2 * number1;
            } else {
                return number2 / number1;
            }
        }

        public void run(String input) {
            String[] split = input.split("[ ]+");
            Stack<Integer> stack = new Stack<>();
             for (int i = 0; i < split.length; i++) {
                if (split[i].matches("-?[0-9]+")) {
                   stack.push(Integer.parseInt(split[i]));
                } else {
                    int result = calculate(stack.pop(), stack.pop(), split[i]);
                    stack.push(result);
                }
            }
            System.out.println(stack.pop());
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/42/stages/227/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 13 Jan 2022 09:40:48 UTC
record: 8
